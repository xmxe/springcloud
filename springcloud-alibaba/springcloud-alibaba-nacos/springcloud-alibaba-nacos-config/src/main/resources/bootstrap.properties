server.port=8072
# 默认从nacos里面匹配{spring.application.name}.{spring.cloud.nacos.config.file-extension}
spring.application.name=nacos-config
spring.cloud.nacos.config.server-addr=192.168.236.132:8848

# nacos-server配置内容的数据格式 目前只支持 properties和yaml，默认properties.
# dataId后缀必须与配置内容格式匹配 对自定义扩展的 Data Id 配置无影响
spring.cloud.nacos.config.file-extension=yaml

# 你可以通过配置 spring.cloud.nacos.config.refresh.enabled=false 来关闭动态刷新

# 指定nacos-config namespace
# 用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。
# Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。
# 在没有明确指定 ${spring.cloud.nacos.config.namespace} 配置的情况下， 默认使用的是 Nacos 上 Public 这个namespae
spring.cloud.nacos.config.namespace=8ef0661a-f6fa-450f-8440-b11ae8d0e8a6

# spring-cloud-starter-alibaba-nacos-config 在加载配置的时候，不仅仅加载了以 dataid 为
# ${spring.application.name}.${file-extension:properties} 为前缀的基础配置，还加载了dataid为
# ${spring.application.name}-${profile}.${file-extension:properties} 的基础配置。
# 在日常开发中如果遇到多套环境下的不同配置，可以通过Spring 提供的 ${spring.profiles.active} 这个配置项来配置。
# 会匹配Data Id=nacos-config-dev.yaml
spring.profiles.active=dev

# 在没有明确指定 ${spring.cloud.nacos.config.group} 配置的情况下， 默认使用的是 DEFAULT_GROUP 。
# 如果需要自定义自己的 Group，可以通过以下配置来实现：
spring.cloud.nacos.config.group=DEV_GROUP

# 自定义扩展的 Data Id 配置 既可以解决多个应用间配置共享的问题，又可以支持一个应用有多个配置文件
# 多个Data Id同时配置时，他的优先级关系是 spring.cloud.nacos.config.extension-configs[n].data-id 其中 n 的值越大，优先级越高。
# spring.cloud.nacos.config.extension-configs[n].data-id 的值必须带文件扩展名，文件扩展名既可支持 properties，又可以支持 yaml/yml。
# 此时spring.cloud.nacos.config.file-extension 的配置对自定义扩展配置的 Data Id 文件扩展名没有影响。
# 通过spring.cloud.nacos.config.extension-configs[n].data-id 的配置方式来支持多个 Data Id 的配置
spring.cloud.nacos.config.extension-configs[0].data-id=nacos-config.properties
spring.cloud.nacos.config.extension-configs[1].data-id=nacos-config-dev.yaml
# 通过 spring.cloud.nacos.config.extension-configs[n].group 的配置方式自定义 Data Id 所在的组，不明确配置的话，默认是 DEFAULT_GROUP。
spring.cloud.nacos.config.extension-configs[1].group=DEV_GROUP
spring.cloud.nacos.config.extension-configs[2].data-id=nacos-config-dev.yaml
spring.cloud.nacos.config.extension-configs[2].group=DEFAULT_GROUP
# 通过 spring.cloud.nacos.config.extension-configs[n].refresh 的配置方式来控制该 Data Id 在配置变更时，是否支持应用中可动态刷新，
# 感知到最新的配置值。默认是不支持的。
spring.cloud.nacos.config.extension-configs[2].refresh=true

# 为了更加清晰的在多个应用间配置共享的 Data Id ，你可以通过以下的方式来配置
spring.cloud.nacos.config.shared-configs[0].data-id=nacos-config.yaml
# 配置 Data Id所在分组，缺省默认 DEFAULT_GROUP
spring.cloud.nacos.config.shared-configs[0].group=DEV_GROUP
# 配置Data Id 在配置变更时，是否动态刷新，缺省默认 false
spring.cloud.nacos.config.shared-configs[0].refresh=true

#Spring Cloud Alibaba Nacos Config 目前提供了三种配置能力从 Nacos 拉取相关的配置。
#A: 通过 spring.cloud.nacos.config.shared-configs[n].data-id 支持多个共享 Data Id 的配置
#B: 通过 spring.cloud.nacos.config.extension-configs[n].data-id 的方式支持多个扩展 Data Id 的配置
#C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置
#当三种方式共同使用时，他们的一个优先级关系是:A < B < C