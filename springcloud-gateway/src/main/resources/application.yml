server:
  port: 8087

spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      # 对所有请求添加过滤器
#      default-filters:
#        - AddResponseHeader=X-Response-Default-Red, Default-Blue
          # 给真实请求加一个统一前缀
#        - PrefixPath=/httpbin
      routes:
        # 自定义的路由 ID，保持唯一 '-'代表集合
        - id: 163
          # 目标服务地址
          uri: http://www.163.com/
          # 断言 路由条件
          predicates:
            - Path=/163/**
            # 匹配host
#            - Host=**.example.com
#            - Method=GET
            # 携带参数X-Request-Id或者满足\d+的请求头才会匹配
#            - Header=X-Request-Id, \d+
            # 匹配Http请求中的查询参数，请求中携带param1=value的请求可以匹配
#            - Query=param1, value
            # 根据请求参数属性名
#            - Query=param1
            # 根据cookie转发 配置对Cookie中值的匹配，第一个为key，第二个为value。下例匹配cookie设置chocolate:ch.p的请求
#            - Cookie=chocolate, ch.p
            # 设置时间之后可以路由
#            - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]
            # 设置时间之前可以路由
#            - Before=2017-01-20T17:42:47.789-07:00[America/Denver]
#            - Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]
            # 通过ip路由
#            - RemoteAddr=192.168.1.1/24
            # 至少两组以上路由可以配置权重路由，配置后会根据权重随机访问几个路由
#            - Weight= service1,80

        - id: providerService
          # lb=load balance负载均衡 内部使用ribbon实现
          uri: lb://providerService
          predicates:
            # http://localhost:8087/abc/hello_ribbon?name=a 访问provider_service服务
            - Path=/abc/**
          filters:
            # 访问/abc/def/gh会直接访问/def/gh 如果设置=2的话直接访问/gh
            - StripPrefix=1
            # 自定义局部过滤器 需要写在配置文件里 不加name的简写
            - Auth
            # 加name的写法
            - name: IPForbid
              args:
                forbidIp: 0:0:0:0:0:0:0:1
            # 重定向，配置包含重定向的返回码和地址
#            - RedirectTo=302, https://acme.org
            # 去掉某个请求头信息
#            - RemoveRequestHeader=X-Request-Foo
            # 去掉某个回执头信息
#            - RemoveResponseHeader=X-Request-Foo
            # 去掉某个请求参数信息 #改写路径
#            - RemoveRequestParameter=red
            # 重写响应头
#            - RewriteResponseHeader = X-Response-Foo,password=[^&]+,password=***
            # 设置请求路径，与RewritePath类似
#            - SetPath=/{segment}
            # 设置请求头信息
#            - SetRequestHeader=X-Request-Red, Blue
#            - AddRequestHeader=X-Request-Foo, Bar
            # 请求携带保留原始Host
#            - PreserveHostHeader
            # 对所有的请求路径添加前缀 访问http://localhost:8087/mypath/abc/**
#            - PrefixPath=/mypath
            #路径重写后转发
#            - RewritePath=/where(?<segment>/?.*), /test(?<segment>/?.*)

            #请求大小
#            - name: RequestSize
#              args:
#                maxSize: 5000000

            #限流的name必须是RequestRateLimiter
#            - name: RequestRateLimiter
#              args:
                  # 令牌桶每秒填充平均速率。
#                redis-rate-limiter.replenishRate: 10
                  # 令牌桶总容量。
#                redis-rate-limiter.burstCapacity: 20
                  # 使用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。这里的bean配置在GateWayConfig.java中
#                key-resolver: "#{@ipKeyResolver}"

#            - name: Hystrix
#              args:
#                name: fallbackCmd
#                fallbackUri: forward:/incaseoffailureusethis

#            - name: Retry
#              args:
                  # 重试次数，默认值是 3 次
#                retries: 3
                  # HTTP 的状态返回码 取值请参考：org.springframework.http.HttpStatus
#                statuses: BAD_GATEWAY
                  # 指定哪些方法的请求需要进行重试逻辑，默认值是 GET 方法，取值参考：org.springframework.http.HttpMethod
#                methods: xxx
                  #一些列的状态码配置，取值参考：org.springframework.http.HttpStatus.Series。符合的某段状态码才会进行重试逻辑，默认值是 SERVER_ERROR，值是 5，也就是 5XX(5 开头的状态码)，共有5 个值。
#                series: xxx

              # 设置回执状态码。
#            - SetStatus=401
              # 设置Http状态
#            - name: SetStatus
#              args:
#                status: 401
              # 设置文件传输大小
#            - name: RequestSize
#              args:
#                maxSize: 5000000

      # 设置负载均衡
      discovery:
        locator:
          enabled: true
          # 设置服务名小写，默认false 服务名大写
          lower-case-service-id: true

#  redis:
#    host: localhost
#    port: 6379
#    database: 0

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8080/eureka/